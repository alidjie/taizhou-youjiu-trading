{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/taizhou-youjiu-trading/src/app/api/customers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// 模拟数据库存储\nlet customers: any[] = [];\n\n// POST /api/customers - 创建新客户\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // 验证必需字段\n    const requiredFields = ['name', 'email', 'country'];\n    for (const field of requiredFields) {\n      if (!body[field]) {\n        return NextResponse.json(\n          { success: false, error: `Missing required field: ${field}` },\n          { status: 400 }\n        );\n      }\n    }\n\n    // 验证邮箱格式\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(body.email)) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid email format' },\n        { status: 400 }\n      );\n    }\n\n    // 检查邮箱是否已存在\n    const existingCustomer = customers.find(c => c.email === body.email);\n    if (existingCustomer) {\n      return NextResponse.json(\n        { success: false, error: 'Customer with this email already exists' },\n        { status: 409 }\n      );\n    }\n\n    // 创建新客户\n    const newCustomer = {\n      id: `customer-${Date.now()}`,\n      name: body.name,\n      email: body.email,\n      phone: body.phone || null,\n      company: body.company || null,\n      country: body.country,\n      subscribed: body.subscribed || false,\n      registeredAt: new Date(),\n      lastOrderDate: null,\n      totalOrders: 0,\n      totalSpent: 0,\n      customerType: 'regular', // regular, vip, wholesale\n      notes: body.notes || '',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // 保存到模拟数据库\n    customers.push(newCustomer);\n\n    return NextResponse.json({\n      success: true,\n      data: newCustomer,\n      message: 'Customer created successfully'\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Error creating customer:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to create customer' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/customers - 获取所有客户\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const country = searchParams.get('country');\n    const customerType = searchParams.get('customerType');\n    const subscribed = searchParams.get('subscribed');\n    const search = searchParams.get('search');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n\n    let filteredCustomers = [...customers];\n\n    // 按国家筛选\n    if (country) {\n      filteredCustomers = filteredCustomers.filter(customer => customer.country === country);\n    }\n\n    // 按客户类型筛选\n    if (customerType) {\n      filteredCustomers = filteredCustomers.filter(customer => customer.customerType === customerType);\n    }\n\n    // 按订阅状态筛选\n    if (subscribed !== null) {\n      const isSubscribed = subscribed === 'true';\n      filteredCustomers = filteredCustomers.filter(customer => customer.subscribed === isSubscribed);\n    }\n\n    // 搜索功能\n    if (search) {\n      const searchTerm = search.toLowerCase();\n      filteredCustomers = filteredCustomers.filter(customer => \n        customer.name.toLowerCase().includes(searchTerm) ||\n        customer.email.toLowerCase().includes(searchTerm) ||\n        (customer.company && customer.company.toLowerCase().includes(searchTerm))\n      );\n    }\n\n    // 按注册日期排序（最新的在前）\n    filteredCustomers.sort((a, b) => new Date(b.registeredAt).getTime() - new Date(a.registeredAt).getTime());\n\n    // 分页\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedCustomers = filteredCustomers.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      success: true,\n      data: paginatedCustomers,\n      pagination: {\n        page,\n        limit,\n        total: filteredCustomers.length,\n        totalPages: Math.ceil(filteredCustomers.length / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching customers:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch customers' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}