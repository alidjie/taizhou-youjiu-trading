{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/taizhou-youjiu-trading/src/app/api/orders/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// 模拟数据库存储\nlet orders: any[] = [];\n\n// POST /api/orders - 创建新订单\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // 验证必需字段\n    const requiredFields = ['customerId', 'customerName', 'email', 'items'];\n    for (const field of requiredFields) {\n      if (!body[field]) {\n        return NextResponse.json(\n          { success: false, error: `Missing required field: ${field}` },\n          { status: 400 }\n        );\n      }\n    }\n\n    // 验证订单项目\n    if (!Array.isArray(body.items) || body.items.length === 0) {\n      return NextResponse.json(\n        { success: false, error: 'Order must contain at least one item' },\n        { status: 400 }\n      );\n    }\n\n    // 计算订单总金额\n    let totalAmount = 0;\n    const validatedItems = body.items.map((item: any) => {\n      if (!item.productId || !item.quantity || !item.unitPrice) {\n        throw new Error('Invalid item data');\n      }\n      const itemTotal = item.quantity * item.unitPrice;\n      totalAmount += itemTotal;\n      return {\n        productId: item.productId,\n        productName: item.productName,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: Math.round(itemTotal * 100) / 100\n      };\n    });\n\n    // 创建新订单\n    const newOrder = {\n      id: `order-${Date.now()}`,\n      customerId: body.customerId,\n      customerName: body.customerName,\n      email: body.email,\n      items: validatedItems,\n      totalAmount: Math.round(totalAmount * 100) / 100,\n      currency: body.currency || 'USD',\n      status: 'pending',\n      orderDate: new Date(),\n      estimatedDelivery: body.estimatedDelivery ? new Date(body.estimatedDelivery) : null,\n      trackingNumber: null,\n      notes: body.notes || '',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // 保存到模拟数据库\n    orders.push(newOrder);\n\n    return NextResponse.json({\n      success: true,\n      data: newOrder,\n      message: 'Order created successfully'\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Error creating order:', error);\n    return NextResponse.json(\n      { success: false, error: error instanceof Error ? error.message : 'Failed to create order' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/orders - 获取所有订单\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const customerId = searchParams.get('customerId');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n\n    let filteredOrders = [...orders];\n\n    // 按状态筛选\n    if (status) {\n      filteredOrders = filteredOrders.filter(order => order.status === status);\n    }\n\n    // 按客户ID筛选\n    if (customerId) {\n      filteredOrders = filteredOrders.filter(order => order.customerId === customerId);\n    }\n\n    // 按日期排序（最新的在前）\n    filteredOrders.sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime());\n\n    // 分页\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedOrders = filteredOrders.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      success: true,\n      data: paginatedOrders,\n      pagination: {\n        page,\n        limit,\n        total: filteredOrders.length,\n        totalPages: Math.ceil(filteredOrders.length / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch orders' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}